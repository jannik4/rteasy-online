{"version":3,"sources":["wasm/pkg/index_bg.js","../node_modules/webpack/buildin/harmony-module.js","wasm/pkg/index.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","setPanicHook","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","check","ptr0","len0","build","Simulator","__wrap","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint32Memory0","getArrayJsValueFromWasm0","Uint32Array","result","i","_assertClass","instance","klass","Error","name","this","__destroy_into_raw","StepResult","kind","retptr","r0","r1","v1","base","ptr1","len1","v2","value","ptr2","len2","v0","page_nr","v3","addr","ptr3","len3","save","Object","create","prototype","Span","arg0","StepResultCondition","x","__wbindgen_string_new","arg1","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","stack","__wbg_error_4bb6c2a97407129a","console","error","__wbindgen_throw","__wbindgen_rethrow","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"static/js/6.6159fe51.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function setPanicHook() {\n    wasm.setPanicHook();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} code\n*/\nexport function check(code) {\n    var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.check(ptr0, len0);\n}\n\n/**\n* @param {string} code\n* @returns {Simulator}\n*/\nexport function build(code) {\n    var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.build(ptr0, len0);\n    return Simulator.__wrap(ret);\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n/**\n*/\nexport class Simulator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Simulator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_simulator_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.simulator_reset(this.ptr);\n    }\n    /**\n    * Returns `true` if the simulator is finished.\n    * @returns {boolean}\n    */\n    is_finished() {\n        var ret = wasm.simulator_is_finished(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cycle_count() {\n        var ret = wasm.simulator_cycle_count(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {StepResult | undefined}\n    */\n    micro_step() {\n        var ret = wasm.simulator_micro_step(this.ptr);\n        return ret === 0 ? undefined : StepResult.__wrap(ret);\n    }\n    /**\n    * @returns {StepResult | undefined}\n    */\n    step() {\n        var ret = wasm.simulator_step(this.ptr);\n        return ret === 0 ? undefined : StepResult.__wrap(ret);\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    registers(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_registers(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    register_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string | undefined}\n    */\n    register_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_into_register(name, value, base) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.simulator_write_into_register(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    buses(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_buses(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    bus_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_bus_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_into_bus(name, value, base) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.simulator_write_into_bus(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n    }\n    /**\n    * @returns {any[]}\n    */\n    memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    memory_page_count(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_count(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_prev(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_prev(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_next(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @param {string} base\n    * @returns {any[]}\n    */\n    memory_page(name, page_nr, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v3 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v3;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} addr\n    * @param {string} value\n    * @param {string} base\n    */\n    write_into_memory(name, addr, value, base) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.simulator_write_into_memory(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    memory_save(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_save(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} save\n    */\n    memory_load_from_save(name, save) {\n        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(save, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.simulator_memory_load_from_save(this.ptr, ptr0, len0, ptr1, len1);\n    }\n}\n/**\n*/\nexport class Span {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Span.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_span_free(ptr);\n    }\n    /**\n    */\n    get start() {\n        var ret = wasm.__wbg_get_span_start(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set start(arg0) {\n        wasm.__wbg_set_span_start(this.ptr, arg0);\n    }\n    /**\n    */\n    get end() {\n        var ret = wasm.__wbg_get_span_end(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set end(arg0) {\n        wasm.__wbg_set_span_end(this.ptr, arg0);\n    }\n}\n/**\n*/\nexport class StepResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresult_free(ptr);\n    }\n    /**\n    */\n    get is_at_statement_start() {\n        var ret = wasm.__wbg_get_stepresult_is_at_statement_start(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set is_at_statement_start(arg0) {\n        wasm.__wbg_set_stepresult_is_at_statement_start(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        var ret = wasm.__wbg_get_stepresult_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresult_span(this.ptr, ptr0);\n    }\n    /**\n    */\n    get condition() {\n        var ret = wasm.__wbg_get_stepresult_condition(this.ptr);\n        return ret === 0 ? undefined : StepResultCondition.__wrap(ret);\n    }\n    /**\n    * @param {StepResultCondition | undefined} arg0\n    */\n    set condition(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, StepResultCondition);\n            ptr0 = arg0.ptr;\n            arg0.ptr = 0;\n        }\n        wasm.__wbg_set_stepresult_condition(this.ptr, ptr0);\n    }\n}\n/**\n*/\nexport class StepResultCondition {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResultCondition.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresultcondition_free(ptr);\n    }\n    /**\n    */\n    get value() {\n        var ret = wasm.__wbg_get_stepresultcondition_value(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set value(arg0) {\n        wasm.__wbg_set_stepresultcondition_value(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        var ret = wasm.__wbg_get_stepresult_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresult_span(this.ptr, ptr0);\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_new_59cb74e423758ede() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_558ba5917b466edd(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";"],"sourceRoot":""}