{"version":3,"sources":["wasm/pkg/index_bg.js","../node_modules/webpack/buildin/harmony-module.js","wasm/pkg/index.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint32Memory0","getUint32Memory0","Uint32Array","getArrayJsValueFromWasm0","slice","result","i","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","_assertClass","instance","klass","Error","name","setPanicHook","check","retptr","ptr0","len0","r0","build","r1","Simulator","__wrap","Signals","this","__destroy_into_raw","v0","Object","create","prototype","statement","Span","stop_on_breakpoint","StepResult","kind","r2","v1","base","ptr1","len1","r3","ptr2","len2","v2","value","page_nr","address","v3","addr","ptr3","len3","save","arg0","StepResultCondition","__wbindgen_string_new","arg1","__wbindgen_object_drop_ref","__wbindgen_number_new","__wbg_new_693216e109162396","__wbg_stack_0ddaca5d1abfb52f","stack","__wbg_error_09919627ac0992f5","console","error","__wbindgen_throw","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"static/js/6.40630dbe.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nexport function setPanicHook() {\n    wasm.setPanicHook();\n}\n\n/**\n* @param {string} code\n*/\nexport function check(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.check(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {Simulator}\n*/\nexport function build(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.build(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Simulator.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport class Signals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signals_free(ptr);\n    }\n    /**\n    * @returns {any[]}\n    */\n    condition_signals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signals_condition_signals(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    control_signals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signals_control_signals(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Simulator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Simulator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_simulator_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.simulator_reset(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cycle_count() {\n        var ret = wasm.simulator_cycle_count(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_finished() {\n        var ret = wasm.simulator_is_finished(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Signals}\n    */\n    signals() {\n        var ret = wasm.simulator_signals(this.ptr);\n        return Signals.__wrap(ret);\n    }\n    /**\n    * @param {number} statement\n    * @returns {Span | undefined}\n    */\n    statement_span(statement) {\n        var ret = wasm.simulator_statement_span(this.ptr, statement);\n        return ret === 0 ? undefined : Span.__wrap(ret);\n    }\n    /**\n    * @param {number} statement\n    */\n    add_breakpoint(statement) {\n        wasm.simulator_add_breakpoint(this.ptr, statement);\n    }\n    /**\n    * @param {number} statement\n    */\n    remove_breakpoint(statement) {\n        wasm.simulator_remove_breakpoint(this.ptr, statement);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    breakpoints() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_breakpoints(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {boolean} stop_on_breakpoint\n    * @returns {StepResult | undefined}\n    */\n    micro_step(stop_on_breakpoint) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_micro_step(retptr, this.ptr, stop_on_breakpoint);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StepResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {boolean} stop_on_breakpoint\n    * @returns {StepResult | undefined}\n    */\n    step(stop_on_breakpoint) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_step(retptr, this.ptr, stop_on_breakpoint);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StepResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    registers(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_registers(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    register_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string | undefined}\n    */\n    register_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_register(name, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_register(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    buses(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_buses(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    bus_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_bus_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_bus(name, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_bus(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    register_arrays() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_register_arrays(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {any[] | undefined}\n    */\n    register_array_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {number}\n    */\n    register_array_page_count(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_page_count(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {number} page_nr\n    * @param {string} base\n    * @returns {any[]}\n    */\n    register_array_page(name, page_nr, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_page(retptr, this.ptr, ptr0, len0, page_nr, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {number} idx\n    * @param {string} value\n    * @param {string} base\n    */\n    write_register_array(name, idx, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_register_array(retptr, this.ptr, ptr0, len0, idx, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {any[] | undefined}\n    */\n    memory_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    memory_page_count(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_count(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_prev(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_prev(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_next(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} address\n    * @returns {string | undefined}\n    */\n    memory_page_nr_of_address(name, address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_nr_of_address(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @param {string} base\n    * @returns {any[]}\n    */\n    memory_page(name, page_nr, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v3 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v3;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} addr\n    * @param {string} value\n    * @param {string} base\n    */\n    write_memory(name, addr, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len2 = WASM_VECTOR_LEN;\n            var ptr3 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len3 = WASM_VECTOR_LEN;\n            wasm.simulator_write_memory(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    save_memory(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.simulator_save_memory(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} save\n    */\n    load_memory_from_save(name, save) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = passStringToWasm0(save, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.simulator_load_memory_from_save(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Span {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Span.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_span_free(ptr);\n    }\n    /**\n    */\n    get start() {\n        var ret = wasm.__wbg_get_span_start(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set start(arg0) {\n        wasm.__wbg_set_span_start(this.ptr, arg0);\n    }\n    /**\n    */\n    get end() {\n        var ret = wasm.__wbg_get_span_end(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set end(arg0) {\n        wasm.__wbg_set_span_end(this.ptr, arg0);\n    }\n}\n/**\n*/\nexport class StepResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresult_free(ptr);\n    }\n    /**\n    */\n    get statement() {\n        var ret = wasm.__wbg_get_stepresult_statement(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set statement(arg0) {\n        wasm.__wbg_set_stepresult_statement(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        var ret = wasm.__wbg_get_stepresult_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresult_span(this.ptr, ptr0);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_void() {\n        var ret = wasm.stepresult_is_void(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_condition() {\n        var ret = wasm.stepresult_is_condition(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_pipe() {\n        var ret = wasm.stepresult_is_pipe(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_statement_end() {\n        var ret = wasm.stepresult_is_statement_end(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_breakpoint() {\n        var ret = wasm.stepresult_is_breakpoint(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_assert_error() {\n        var ret = wasm.stepresult_is_assert_error(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {StepResultCondition | undefined}\n    */\n    as_condition() {\n        var ret = wasm.stepresult_as_condition(this.ptr);\n        return ret === 0 ? undefined : StepResultCondition.__wrap(ret);\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_registers() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_registers(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_register_arrays() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_register_arrays(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class StepResultCondition {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResultCondition.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresultcondition_free(ptr);\n    }\n    /**\n    */\n    get result() {\n        var ret = wasm.__wbg_get_stepresultcondition_result(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set result(arg0) {\n        wasm.__wbg_set_stepresultcondition_result(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        var ret = wasm.__wbg_get_stepresultcondition_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresultcondition_span(this.ptr, ptr0);\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    var ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_693216e109162396() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_0ddaca5d1abfb52f(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_09919627ac0992f5(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";"],"sourceRoot":""}