// Export
pub ast_eoi -> Ast<'s>: ast eoi { $1 };
pub assignment_eoi -> Assignment<'s>: assignment eoi { $1 };
pub assert_eoi -> Assert<'s>: assert eoi { $1 };

// Ast
ast -> Ast<'s>:
    many0(declaration) many0(statement) opt(terminated(spanned(label), ":")) {
        Ast { declarations: $1, statements: $2, trailing_label: $3 }
    };

// Declarations
declaration -> Declaration<'s>:
      declare_register_array { Declaration::RegisterArray($1) }
    | declare_output { Declaration::Register($1) }
    | declare_register { Declaration::Register($1) }
    | declare_input { Declaration::Bus($1) }
    | declare_bus { Declaration::Bus($1) }
    | declare_memory { Declaration::Memory($1) };

declare_register_array -> DeclareRegisterArray<'s>:
    "declare" "register" "array" sep1(declare_register_array_item, ",") { DeclareRegisterArray { register_arrays: $4, span: $span.into() } };
declare_register_array_item -> DeclareRegisterArrayItem<'s>:
    spanned(ident) opt(spanned(bit_range)) "[" number_usize "]" { DeclareRegisterArrayItem { ident: $1, range: $2, len: $4, span: $span.into() } };

declare_output -> DeclareRegister<'s>:
    "declare" "output" sep1(reg_bus, ",") { DeclareRegister { registers: $3, kind: RegisterKind::Output, span: $span.into() } };
declare_register -> DeclareRegister<'s>:
    "declare" "register" sep1(reg_bus, ",") { DeclareRegister { registers: $3, kind: RegisterKind::Intern, span: $span.into() } };

declare_input -> DeclareBus<'s>:
    "declare" "input" sep1(reg_bus, ",") { DeclareBus { buses: $3, kind: BusKind::Input, span: $span.into() } };
declare_bus -> DeclareBus<'s>:
    "declare" "bus" sep1(reg_bus, ",") { DeclareBus { buses: $3, kind: BusKind::Intern, span: $span.into() } };

declare_memory -> DeclareMemory<'s>:
    "declare" "memory" sep1(memory, ",") { DeclareMemory { memories: $3, span: $span.into() } };


// Statement
statement -> Statement<'s>:
    opt(terminated(spanned(label), ":")) statement_operations spanned(";") {
        Statement { label: $1, operations: $2, span: $span.into(), span_semicolon: $3.span }
    };
statement_operations -> Operations<'s>:
    operations opt(pair(spanned("|"), operations)) {
        Operations {
          span: $span.into(),
          span_pipe: $2.as_ref().map(|post| post.0.span),
          operations: $1,
          operations_post: $2.map(|post| post.1),
        }
    };

// Operations
nop -> Nop: "nop" { Nop { span: $span.into() } }; 
goto -> Goto<'s>: "goto" spanned(label) { Goto { label: $2, span: $span.into() } };
write -> Write<'s>: "write" spanned(ident) { Write { ident: $2, span: $span.into() } };
read -> Read<'s>: "read" spanned(ident) { Read { ident: $2, span: $span.into() } };
if_ -> If<'s>:
    "if" expression
    "then" operations
    opt(preceded("else", operations))
    "fi" { If { condition: $2, operations_if: $4, operations_else: $5, span: $span.into() } };
switch -> Switch<'s>:
    "switch" expression "{" many0(clause) "}" {
        Switch { expression: $2, clauses: $4, span: $span.into() }
    };
clause -> Clause<'s>:
    either(case_clause, default_clause) ":" operations { Clause { clause: $1, operations: $3, span: $span.into() } };
case_clause -> CaseClause<'s>: "case" expression { CaseClause { value: $2, span: $span.into() } };
default_clause -> DefaultClause: "default" { DefaultClause { span: $span.into() } };
assert -> Assert<'s>: "assert" expression { Assert { condition: $2, span: $span.into() } };
lvalue -> Lvalue<'s>:
      concat { Lvalue::Concat($1) }
    | register_array { Lvalue::RegisterArray($1) }
    | reg_bus { Lvalue::RegBus($1) };
assignment -> Assignment<'s>: lvalue "<-" expression { Assignment { lhs: $1, rhs: $3, span: $span.into() } };

operation -> Operation<'s>:
      nop { Operation::Nop($1) } | goto { Operation::Goto($1) }
    | write { Operation::Write($1) } | read { Operation::Read($1) }
    | if_ { Operation::If($1) } | switch { Operation::Switch($1) }
    | assert { Operation::Assert($1) } | assignment { Operation::Assignment($1) };
operations -> Vec<Operation<'s>>: sep1(operation, ",") { $1 };

// Expression
expression -> Expression<'s>:
      expression_or spanned("xor") expression {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Xor, $2.span), span: $span.into() }.into()
      }
    | expression_or { $1 };

expression_or -> Expression<'s>:
      expression_nor spanned("or") expression_or {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Or, $2.span), span: $span.into() }.into()
      }
    | expression_nor { $1 };

expression_nor -> Expression<'s>:
      expression_and spanned("nor") expression_nor {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Nor, $2.span), span: $span.into() }.into()
      }
    | expression_and { $1 };

expression_and -> Expression<'s>:
      expression_nand spanned("and") expression_and {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::And, $2.span), span: $span.into() }.into()
      }
    | expression_nand { $1 };

expression_nand -> Expression<'s>:
      expression_not spanned("nand") expression_nand {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Nand, $2.span), span: $span.into() }.into()
      }
    | expression_not { $1 };

expression_not -> Expression<'s>:
      spanned("not") expression_not {
        UnaryTerm { expression: $2, operator: sp(UnaryOperator::Not, $1.span), span: $span.into() }.into()
      }
    | expression_cmp { $1 };

expression_cmp -> Expression<'s>:
      expression_cmpo spanned("=") expression_cmpo {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Eq, $2.span), span: $span.into() }.into()
      }
    | expression_cmpo spanned("<>") expression_cmpo {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Ne, $2.span), span: $span.into() }.into()
      }
    | expression_cmpo { $1 };

expression_cmpo -> Expression<'s>:
      expression_plus spanned("<=") expression_plus {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Le, $2.span), span: $span.into() }.into()
      }
    | expression_plus spanned("<") expression_plus {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Lt, $2.span), span: $span.into() }.into()
      }
    | expression_plus spanned(">=") expression_plus {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Ge, $2.span), span: $span.into() }.into()
      }
    | expression_plus spanned(">") expression_plus {
        BinaryTerm { lhs: $1, rhs: $3, operator: sp(BinaryOperator::Gt, $2.span), span: $span.into() }.into()
      }
    | expression_plus { $1 };

expression_plus -> Expression<'s>:
    expression_sxt many0(pair(spanned(either("+", "-")), expression_sxt)) {
      let mut expr = $1;
      for rhs in $2 {
        expr = BinaryTerm {
          span: Span { start: expr.span().start, end: rhs.1.span().end },
          lhs: expr,
          rhs: rhs.1,
          operator: rhs.0.map(|op| match op {
            Either::Left(_) => BinaryOperator::Add,
            Either::Right(_) => BinaryOperator::Sub,
          }),
        }.into();
      }
      expr
    };

expression_sxt -> Expression<'s>:
      spanned("sxt") expression_sxt {
        UnaryTerm { expression: $2, operator: sp(UnaryOperator::Sxt, $1.span), span: $span.into() }.into()
      }
    | expression_sign_neg { $1 };

expression_sign_neg -> Expression<'s>:
      spanned("-") expression_sign_neg {
        UnaryTerm { expression: $2, operator: sp(UnaryOperator::Sign, $1.span), span: $span.into() }.into()
      }
    | spanned("neg") expression_sign_neg {
        UnaryTerm { expression: $2, operator: sp(UnaryOperator::Neg, $1.span), span: $span.into() }.into()
      }
    | expression_leaf { $1 };

expression_leaf -> Expression<'s>:
      "(" expression ")" { $2 }
    | concat { Atom::Concat($1).into() }
    | register_array { Atom::RegisterArray($1).into() }
    | reg_bus { Atom::RegBus($1).into() }
    | spanned(number) { Atom::Number($1).into() };

// ...
memory -> Memory<'s>: spanned(ident) memory_range { Memory { ident: $1, range: $2, span: $span.into() } };
reg_bus -> RegBus<'s>: spanned(ident) opt(spanned(bit_range)) { RegBus { ident: $1, range: $2, span: $span.into() } };
register_array -> RegisterArray<'s>: spanned(ident) "[" expression "]" { RegisterArray { ident: $1, index: Box::new($3), span: $span.into() } };
concat -> Concat<'s>:
    concat_part many1(preceded(".", concat_part)) {
        let mut parts = $2;
        parts.insert(0, $1);
        Concat { parts, span: $span.into() }
    };
concat_part -> ConcatPart<'s>:
      register_array { ConcatPart::RegisterArray($1) }
    | reg_bus { ConcatPart::RegBus($1) }
    | spanned(number) { ConcatPart::Number($1) };

// Common rules
bit_range -> BitRange:
      "(" number_usize ":" number_usize ")" { BitRange { msb: $2, lsb: Some($4) } }
    | "(" number_usize ")" { BitRange { msb: $2, lsb: None } };
memory_range -> MemoryRange<'s>:
    "(" spanned(ident) "," spanned(ident) ")" { MemoryRange { address_register: $2, data_register: $4, span: $span.into() } };

// Number rules
number_usize -> usize: exact(Token::LiteralNumberDec) { parse_usize($1, $span) }?;
number_bin -> Number: exact(Token::LiteralNumberBin) { parse_bin($1, $span) }?;
number_dec -> Number: exact(Token::LiteralNumberDec) { parse_dec($1, $span) }?;
number_hex -> Number: exact(Token::LiteralNumberHex) { parse_hex($1, $span) }?;
number_bit_string -> Number: exact(Token::LiteralNumberBitString) { parse_bit_string($1, $span) }?;
number -> Number:
      number_bin { $1 }
    | number_dec { $1 }
    | number_hex { $1 }
    | number_bit_string { $1 };

// Ident/Label
ident -> Ident<'s>: exact(Token::Identifier) { Ident($1) };
label -> Label<'s>: exact(Token::Identifier) { Label($1) };

+++

// Token shortcuts

";" = Token::Semicolon
":" = Token::Colon
"," = Token::Comma
"|" = Token::Pipe
"." = Token::Dot
"(" = Token::ParenOpen
")" = Token::ParenClose
"[" = Token::BracketOpen
"]" = Token::BracketClose
"{" = Token::BraceOpen
"}" = Token::BraceClose
"<-" = Token::Assign
"quote" = Token::Quote

"declare" = Token::KeywordDeclare
"input" = Token::KeywordInput
"output" = Token::KeywordOutput
"register" = Token::KeywordRegister
"bus" = Token::KeywordBus
"memory" = Token::KeywordMemory
"array" = Token::KeywordArray
"nop" = Token::KeywordNop
"goto" = Token::KeywordGoto
"read" = Token::KeywordRead
"write" = Token::KeywordWrite
"if" = Token::KeywordIf
"then" = Token::KeywordThen
"else" = Token::KeywordElse
"fi" = Token::KeywordFi
"switch" = Token::KeywordSwitch
"case" = Token::KeywordCase
"default" = Token::KeywordDefault
"assert" = Token::KeywordAssert

"=" = Token::OperatorEquality
"<>" = Token::OperatorInequality
"<=" = Token::OperatorLessEquals
"<" = Token::OperatorLess
">=" = Token::OperatorGreaterEquals
">" = Token::OperatorGreater
"+" = Token::OperatorAddition
"-" = Token::OperatorSubtraction
"and" = Token::OperatorAnd
"nand" = Token::OperatorNand
"or" = Token::OperatorOr
"nor" = Token::OperatorNor
"xor" = Token::OperatorXor
"neg" = Token::OperatorNeg
"not" = Token::OperatorNot
"sxt" = Token::OperatorSxt

+++

use rtcore::{ast::*, value::Value};
use crate::lexer::Token;
use toktok::combinator::{sep1, eoi, many0, many1, exact, opt, preceded, terminated, either, positioned, pair};
use toktok::Error;
use std::ops::Range;

type Result<T> = std::result::Result<T, Error<Token>>;

fn parse_bin(s: &str, span: Range<usize>) -> Result<Number> {
    let s = match s.chars().next().unwrap() {
        '0' => &s[2..], // 0b... or 0B...
        '%' => &s[1..], // %...
        _ => unreachable!(),
    };

    match Value::parse_bin(s) {
        Ok(mut value) => {
          value.remove_leading_zeros();
          Ok(Number { value, kind: NumberKind::Binary })
        },
        Err(()) => Err(Error::new_custom(span, "invalid binary number".into())),
    }
}

fn parse_dec(s: &str, span: Range<usize>) -> Result<Number> {
    match Value::parse_dec(s) {
        Ok(value) => Ok(Number { value, kind: NumberKind::Decimal }),
        Err(()) => Err(Error::new_custom(span, "invalid decimal number".into())),
    }
}

fn parse_hex(s: &str, span: Range<usize>) -> Result<Number> {
    let s = match s.chars().next().unwrap() {
        '0' => &s[2..], // 0x... or 0X...
        '$' => &s[1..], // $...
        _ => unreachable!(),
    };

    match Value::parse_hex(s) {
        Ok(value) => Ok(Number { value, kind: NumberKind::Hexadecimal }),
        Err(()) => Err(Error::new_custom(span, "invalid hexadecimal number".into())),
    }
}

fn parse_usize(s: &str, span: Range<usize>) -> Result<usize> {
    match s.parse() {
        Ok(value) => Ok(value),
        Err(_) => Err(Error::new_custom(span, "invalid number".into())),
    }
}

fn parse_bit_string(s: &str, span: Range<usize>) -> Result<Number> {
    let s = &s[1..s.len() - 1];
    match Value::parse_bin(s) {
        Ok(value) => Ok(Number { value, kind: NumberKind::BitString }),
        Err(()) => Err(Error::new_custom(span, "invalid bit string".into())),
    }
}

fn spanned<'s, 't, T, O, F>(f: F) -> impl Fn(toktok::State<'s, 't, T>) -> toktok::PResult<'s, 't, T, Spanned<O>>
where
    F: toktok::Parser<'s, 't, T, O>,
    's: 't,
{
    move |state| {
        let (state, (output, range)) = positioned(f.as_ref()).parse(state)?;

        Ok((state, Spanned { node: output, span: range.into() }))
    }
}

fn sp<T>(node: T, span: Span) -> Spanned<T> {
  Spanned { node, span }
}
